# -*- coding: utf-8 -*-
"""HW8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y5Au9fnKHgBbpIWXHgwlaSMiHrwXzVkS
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
n = 20
fib = [1,1]
for i in range(2, n):
  fib.append(fib[i-1] + fib[i-2])

y = np.array(fib)
y = np.reshape(y, (1,y.shape[0]))

# Hidden Layer = 2 Neurons
model = Sequential()
model.add(Dense(2, input_dim=y.shape[1], activation='relu'))
model.add(Dense(y.shape[1]))
model.compile(loss='mean_squared_error', optimizer='adam')
model.summary()

model.fit(y,y,verbose=1,epochs=2000)
pred = model.predict(y)

from sklearn import metrics
score = np.sqrt(metrics.mean_squared_error(pred,y))
print("Score (RMSE): {}".format(score))
print(pred)

# Hidden Layer = 4 Neurons
model = Sequential()
model.add(Dense(4, input_dim=y.shape[1], activation='relu'))
model.add(Dense(y.shape[1]))
model.compile(loss='mean_squared_error', optimizer='adam')
model.summary()

model.fit(y,y,verbose=1,epochs=2000)
pred = model.predict(y)

score = np.sqrt(metrics.mean_squared_error(pred,y))
print("Score (RMSE): {}".format(score))
print(pred)

from PIL import Image

from google.colab import files
uploaded = files.upload()

img = Image.open("cat.jpg")
img.load()
img = img.resize((128,128), Image.ANTIALIAS)

img_array = np.asarray(img)
img_array = img_array.flatten()
img_array = np.array([img_array])
img_array = img_array.astype(np.float32)

print(img_array.shape[1])
print(img_array)

cols,rows = img.size
img_array2 = img_array.reshape(rows,cols,3)
img_array2 = img_array2.astype(np.uint8)
img2 = Image.fromarray(img_array2, 'RGB')
img2

# Hidden Layer = 5 Neurons
model = Sequential()
model.add(Dense(5, input_dim=img_array.shape[1], activation='relu'))
model.add(Dense(img_array.shape[1]))
model.compile(loss='mean_squared_error', optimizer='adam')
model.summary()

model.fit(img_array,img_array,verbose=1,epochs=20)

print("Neural network ouput")
pred = model.predict(img_array)
print(pred)
print(img_array)

cols,rows = img.size
img_array2 = pred[0].reshape(rows,cols,3)
img_array2 = img_array2.astype(np.uint8)
img2 = Image.fromarray(img_array2, 'RGB')
img2

# Hidden Layer = 10 Neurons
model2 = Sequential()
model2.add(Dense(10, input_dim=img_array.shape[1], activation='relu'))
model2.add(Dense(img_array.shape[1]))
model2.compile(loss='mean_squared_error', optimizer='adam')
model2.summary()

model2.fit(img_array,img_array,verbose=1,epochs=20)

print("Neural network ouput")
pred = model2.predict(img_array)
print(pred)
print(img_array)

cols,rows = img.size
img_array2 = pred[0].reshape(rows,cols,3)
img_array2 = img_array2.astype(np.uint8)
img2 = Image.fromarray(img_array2, 'RGB')
img2

def entropy(p):
  return np.sum(-p * np.log(p))

p_array = np.array([35/256, 36/256, 45/256, 95/256, 24/256, 15/256, 6/256])
p_entropy = entropy(p_array)
print("Entropy of p distribution = %1.4f" %p_entropy)

q_array = np.array([20/256, 56/256, 85/256, 52/256, 22/256, 20/256, 1/256])
q_entropy = entropy(q_array)
print("Entropy of q distribution = %1.4f" %q_entropy)

def cross_entropy(p, q):
  return np.sum(-p *np.log(q))

p_entropy_wrt_q = cross_entropy(p_array,q_array)
q_entropy_wrt_p = cross_entropy(q_array,p_array)

print("Cross Entropy of p distribution wrt q distribution = %1.4f" %p_entropy_wrt_q)
print("Cross Entropy of q distribution wrt p distribution = %1.4f" %q_entropy_wrt_p)

def kl_divergence(p, q):
  return np.sum(-p * np.log(q / p))

p_kl_divergence_wrt_q = kl_divergence(p_array, q_array)
q_kl_divergence_wrt_p = kl_divergence(q_array, p_array)

print("KL Divergence of p distribution wrt q distribution = %1.4f" %p_kl_divergence_wrt_q)
print("KL Divergence of q distribution wrt p distribution = %1.4f" %q_kl_divergence_wrt_p)