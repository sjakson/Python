# -*- coding: utf-8 -*-
"""HW5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n4vkrAWB-pI4BVEzEVYcF-oMuyXMDcGq
"""

import numpy as np

def dz_dx(x,y):
  return (x-2)/(np.sqrt(25-(x-2)**2-(y-3)**2))

def dz_dy(x,y):
  return (y-3)/(np.sqrt(25-(x-2)**2-(y-3)**2))

xStart = 5
yStart = 5
maxLimit = 10000
learning_rate = 0.01

xStartHistory = np.zeros(maxLimit)
yStartHistory = np.zeros(maxLimit)

epsilon = 0.000001

breakLoop = 0

for i in range(maxLimit):
  xStartHistory[i] = xStart
  xStart = xStart - learning_rate * dz_dx(xStart, yStart)
  yStartHistory[i] = yStart
  yStart = yStart - learning_rate * dz_dy(xStart, yStart)

  if (xStartHistory[i] - xStart) < epsilon and (yStartHistory[i] - yStart) < epsilon:
    breakLoop = 1
    
  if i % 10 ==0:
    print("step: ", i, "x: ", xStart, "y: ", yStart)

  if breakLoop:
    break

print("\nFinal values:")
print("x: ", xStart)
print("y: ", yStart)
print("Step to converge: ", i)

#Scikit-Learn
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
RANDOM_SEED = 42
tf.random.set_seed(RANDOM_SEED)
n_samples = 30
train_x = np.linspace(0,20,n_samples)
train_y = 3.7 * train_x + 14 + 4 * np.random.randn(n_samples)
plt.plot(train_x, train_y,'o')
plt.plot(train_x, 3.7*train_x+14)

train_x = train_x.reshape(-1, 1)
train_y = train_y.reshape(-1, 1)

from sklearn import linear_model
from sklearn import preprocessing

linreg = linear_model.LinearRegression()
linreg.fit(train_x, train_y)
print(linreg.intercept_)
print(linreg.coef_)

#Gradient Descent Algorithm
def dRSS_dm (m,b,x,y):
  return(-2*sum((y-m*x-b)*x))
def dRSS_db (m,b,x,y):
  return(-2*sum((y-m*x-b)))

mStart = 0
bStart = 0
learning_rate = 0.0001
maxLimit = 10000
mHistory = np.zeros(maxLimit)
bHistory = np.zeros(maxLimit)
for i in range(maxLimit): 
  dW = dRSS_dm(mStart,bStart,train_x,train_y)
  db = dRSS_db(mStart,bStart,train_x,train_y)
  mStart = mStart - learning_rate * dW
  bStart = bStart - learning_rate * db

  if i % 10 == 0:
    print("step: ", i, "m: ", mStart, "b: ", bStart)

print("\nFinal Values:")
print("m: ", mStart, "b: ", bStart)